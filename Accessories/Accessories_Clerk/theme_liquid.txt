<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
<head>
  <!-- Canopy 5.1.1 -->

  {% render 'head-tag' %}

  <meta name="theme-color" content="{{ settings.feature_col }}">

  <title>
    {{ page_title }}{% if current_tags %} &ndash; {{ 'general.meta.tagged' | t }} "{{ current_tags | join: ', ' }}"{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% render 'social-meta-tags' %}

  {%- liquid
    assign base_font = settings.type_base_font
    assign base_font_bold = base_font | font_modify: 'weight', 'bolder'
    assign base_font_medium = base_font | font_modify: 'weight', '500'
    assign base_font_italic = base_font | font_modify: 'style', 'italic'
    assign base_font_bold_italic = base_font_bold | font_modify: 'style', 'italic'
    assign heading_font = settings.type_heading_font
    assign logo_font = settings.type_logo_font
    assign nav_font = settings.type_nav_font
    assign nav_font_600 = nav_font | font_modify: 'weight', '600'
  -%}

  <style>
    {{ base_font | font_face: font_display: 'fallback' }}
    {{ base_font_bold | font_face: font_display: 'fallback' }}
    {{ base_font_medium | font_face: font_display: 'fallback' }}
    {{ base_font_italic | font_face: font_display: 'fallback' }}
    {{ base_font_bold_italic | font_face: font_display: 'fallback' }}
    {{ heading_font | font_face: font_display: 'fallback' }}
    {{ logo_font | font_face: font_display: 'fallback' }}
    {{ nav_font | font_face: font_display: 'fallback' }}
    {{ nav_font_600 | font_face: font_display: 'fallback' }}
  </style>

  {{ 'styles.css' | asset_url | stylesheet_tag: preload: true }}
  {{ 'progryss.css' | asset_url | stylesheet_tag: preload: true }}
  <!-- text with icon slider -->
  <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">

  <script>
    document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    window.theme = window.theme || {};
    {% if settings.currency_code_enabled %}
    theme.money_format_with_code_preference = {{ shop.money_with_currency_format | json }};
    {% else %}
    theme.money_format_with_code_preference = {{ shop.money_format | json }};
    {% endif %}
    theme.money_format = {{ shop.money_format | json }};
    theme.customerIsLoggedIn = {% if shop.customer_accounts_enabled and customer %}true{% else %}false{% endif %};

    {% if settings.cart_currency_code_enabled %}
      theme.shippingCalcMoneyFormat = {{ shop.money_with_currency_format | json }};
    {% else %}
      theme.shippingCalcMoneyFormat = {{ shop.money_format | json }};
    {% endif %}

    theme.strings = {
      previous: {{ 'general.accessibility_labels.previous' | t | json }},
      next: {{ 'general.accessibility_labels.next' | t | json }},
      close: {{ 'general.accessibility_labels.close' | t | json }},
      addressError: {{ 'map.errors.address_error' | t | json }},
      addressNoResults: {{ 'map.errors.address_no_results' | t | json }},
      addressQueryLimit: {{ 'map.errors.address_query_limit_html' | t | json }},
      authError: {{ 'map.errors.auth_error' | t | json }},
      shippingCalcSubmitButton: {{ 'cart.shipping_calculator.submit' | t | json }},
      shippingCalcSubmitButtonDisabled: {{ 'cart.shipping_calculator.loading' | t | json }},
      infiniteScrollCollectionLoading: {{ 'collections.infinite_scroll.loading' | t | json }},
      infiniteScrollCollectionFinishedMsg : {{ 'collections.infinite_scroll.no_more' | t | json }},
      infiniteScrollBlogLoading: {{ 'blogs.infinite_scroll.loading' | t | json }},
      infiniteScrollBlogFinishedMsg : {{ 'blogs.infinite_scroll.no_more' | t | json }},
      blogsShowTags: {{ 'blogs.general.show_tags' | t | json }},
      priceNonExistent: {{ 'products.variant.non_existent' | t | json }},
      buttonDefault: {{ 'products.grid.add_to_cart' | t | json }},
      buttonNoStock: {{ 'products.variant.out_of_stock' | t | json }},
      buttonNoVariant: {{ 'products.variant.non_existent' | t | json }},
      unitPriceSeparator: {{ 'products.product.unit_price_separator' | t | json }},
      onlyXLeft: {{ 'products.labels.only_x_left' | t: quantity: "[[ quantity ]]" | json }},
      productAddingToCart: {{ 'products.product.adding_to_cart' | t | json }},
      productAddedToCart: {{ 'products.product.added_to_cart_btn' | t | json }},
      quickbuyAdded: {{ 'products.general.quick_buy_added' | t | json }},
      cartSummary: {{ 'layout.cart_summary.cart' | t | json }},
      cartContinue: {{ 'cart.general.continue' | t | json }},
      colorBoxPrevious: {{ 'products.gallery.previous' | t | json }},
      colorBoxNext: {{ 'products.gallery.next' | t | json }},
      colorBoxClose: {{ 'products.gallery.close' | t | json }},
      imageSlider: {{ 'general.slider.images' | t | json }},
      confirmEmptyCart: {{ 'layout.cart_summary.confirm_empty_cart' | t | json }},
      inYourCart: {{ 'products.grid.item_is_in_cart' | t | json }},
      removeFromCart: {{ 'products.grid.remove_from_cart' | t | json }},
      clearAll: {{ 'collections.filtering.clear_all' | t | json }},
      layout_live_search_see_all: {{ 'layout.live_search.see_all' | t | json }},
      general_quick_search_pages: {{ 'general.quick_search.pages' | t | json }},
      general_quick_search_no_results: {{ 'general.quick_search.no_results' | t | json }},
      products_labels_sold_out: {{ 'products.labels.sold_out' | t | json }},
      products_labels_sale: {{ 'products.labels.sale' | t | json }},
      maximumQuantity: {{ 'cart.general.quantity_too_high' | t: quantity: "[quantity]" | json }},
      fullDetails: {{ 'products.general.full_details' | t | json }},
      cartConfirmRemove: {{ 'cart.general.confirm_remove' | t | json }}
    };

    theme.routes = {
      root_url: '{{ routes.root_url }}',
      account_url: '{{ routes.account_url }}',
      account_login_url: '{{ routes.account_login_url }}',
      account_logout_url: '{{ routes.account_logout_url }}',
      account_recover_url: '{{ routes.account_recover_url }}',
      account_register_url: '{{ routes.account_register_url }}',
      account_addresses_url: '{{ routes.account_addresses_url }}',
      collections_url: '{{ routes.collections_url }}',
      all_products_collection_url: '{{ routes.all_products_collection_url }}',
      search_url: '{{ routes.search_url }}',
      cart_url: '{{ routes.cart_url }}',
      cart_add_url: '{{ routes.cart_add_url }}',
      cart_change_url: '{{ routes.cart_change_url }}',
      cart_clear_url: '{{ routes.cart_clear_url }}'
    };

    theme.scripts = {
      masonry: {{ 'masonry.v3.2.2.min.js' | asset_url | json }},
      jqueryInfiniteScroll: {{ 'jquery.infinitescroll.2.1.0.min.js' | asset_url | json }},
      underscore: {{ '//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js' | json }},
      shopifyCommon: {{ 'shopify_common.js' | shopify_asset_url | json }},
      jqueryCart: {{ 'shipping-calculator.v1.0.min.js' | asset_url | json }}
    };

    theme.settings = {
      cartType: {{ settings.cart_type | json }},
      openCartDrawerOnMob: {{ settings.open_drawer_on_mobile | json }},
      quickBuyType: {{ settings.prod_quick_buy_type | json }},
      superscriptDecimals: {{ settings.superscript_decimals | json }},
      currencyCodeEnabled: {{ settings.currency_code_enabled | json }}
    }
  </script>

  {%- if settings.swatch_enabled and settings.swatch_value_list != blank -%}
    {% style %}
      {%- assign swatch_lines = settings.swatch_value_list | newline_to_br | strip_newlines | split: '<br />' -%}
      {%- for line in swatch_lines -%}
        {%- assign line_split = line | split: ':' -%}
        {%- if line_split.last contains '#' -%}
          [data-value="{{ line_split.first | replace: '"', '\"' }}"] { --swatch-background-color: {{- line_split.last -}} }
        {%- else -%}
          [data-value="{{ line_split.first | replace: '"', '\"' }}"] { --swatch-background-image: url({{- line_split.last | strip | file_img_url: '128x128', crop: 'center' -}}) }
        {%- endif -%}
      {%- endfor -%}
    {% endstyle %}
  {%- endif -%}

  {{ content_for_header }}


  {% render 'bold-pr' %}
  
    <!-- Bree Serif Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap" rel="stylesheet">
    <!-- Bree Serif Font -->
  
{% if content_for_header contains 'bss-b2b-cp' %}{% include 'bss-b2b-header' %}{% endif %}
  
  <!-- Start of Clerk.io E-commerce Personalisation tool - www.clerk.io -->
  <script type="text/javascript">
    (function(w,d){
      var e=d.createElement('script');e.type='text/javascript';e.async=true;
      e.src='https://cdn.clerk.io/clerk.js';
      var s=d.getElementsByTagName('script')[0];s.parentNode.insertBefore(e,s);
      w.__clerk_q=w.__clerk_q||[];w.Clerk=w.Clerk||function(){w.__clerk_q.push(arguments)};
    })(window,document);

    Clerk('config', {
      key: 'ofukaDQBwIBdqa8PlDuj9dbamZneuQSF',
      formatters: {
        currency_converter: function(price) {
          var converted_price = (price*Shopify.currency.rate);
          return (converted_price).toString();
        }
      },
      globals: {
        currency_iso: "{{ cart.currency.iso_code }}",
        currency_symbol: "{{ cart.currency.symbol }}"
      }
    });
  </script>
  <!-- End of Clerk.io E-commerce Personalisation tool - www.clerk.io -->


</head>

{%- assign homepage_divider_col_opacity = settings.homepage_divider_col | color_extract: 'alpha' -%}
<body class="template-{{ template.name }} {% if template.suffix != blank %}template-sfx-{{ template.suffix }}{% endif %} {% if template.directory != blank %}template-dir-{{ template.directory }}{% endif %}"
      data-cc-animate-timeout="80">

{% if settings.animations_enabled_desktop %}
  <script>
    document.body.classList.add("cc-animate-enabled");
  </script>
{% endif %}

<a class="skip-link visually-hidden" href="#content">{{ 'general.accessibility_labels.skip_to_content' | t }}</a>

{% section 'cart-drawer' %}

<div id="page-wrap">
  <div id="page-wrap-inner">
    <a id="page-overlay" href="#" aria-controls="mobile-nav" aria-label="{{ 'layout.header.close_mobile_nav_aria_label' | t | escape }}"></a>

    <div id="page-wrap-content">
      {% section 'announcement-bar' %}
      {% section 'header' %}
      {% section 'text-with-icon-slider' %}
      <main id="content">
        {{ content_for_layout }}
      </main>
    </div><!-- /#page-wrap-content -->

    {% section 'footer' %}
  </div>
</div><!-- /#page-wrap -->

{% section 'popup' %}
 
<script>
  class ImageLazyLoaderInstance {
    constructor() {
      this.intersectionObserver = null;
      this.bindObservers();
      this.loadLazyImages();
    }

    static debounce(func, timeout = 300) {
      let timer;
      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => {
          func.apply(this, args);
        }, timeout);
      };
    }

    loadLazyImage(img) {
      const imgLazySrc = img.getAttribute('data-lazy-src'),
        imgLazyBg = img.getAttribute('data-lazy-bg');

      if(!imgLazySrc && !imgLazyBg) {
        console.warn('CC', 'Unable to load lazy image, no URL specified', img);
        return;
      }

      const imageLoadHandler = (newSrc) => {
        if(imgLazySrc) {
          img.setAttribute('src', newSrc);
        } else {
          img.style.backgroundImage = `url('${newSrc}')`;
        }

        // When images are lazy loaded, add a class to any text shadow containers
        const closestTextShadow = img.closest('.has-tint--shadow');
        if (closestTextShadow) {
          closestTextShadow.classList.add('has-tint--shadow-in');
        }

        // Remove lazy placeholder
        if (img.parentElement.classList.contains('lazyload--placeholder')) {
          img.parentElement.classList.remove('lazyload--placeholder');
        }

        img.setAttribute('data-lazy-loaded', true);
      }

      // Find the closest parent with a width
      let imgWidth = img.clientWidth;
      if (imgWidth === 0) {
        let getWidth = function (imgParent) {
          return imgParent.clientWidth > 0 ? imgParent.clientWidth : getWidth(imgParent.parentElement);
        }
        imgWidth = getWidth(img.parentElement);
      }

        // Get the nearest width which is higher than this images width
      let closestWidth = 2048;
      for (let num of [80, 120, 180, 220, 300, 360, 460, 540, 720, 900, 1080, 1296, 1512, 1728, 2048]) {
        if (num > imgWidth) {
          closestWidth = num;
          break;
        }
      }

      // Load the image
      if(imgLazySrc || imgLazyBg){
        const imgUrl = imgLazySrc ? imgLazySrc : imgLazyBg,
          oldSrc = img.getAttribute('src') || img.style.backgroundImage,
          newSrc = imgUrl.replace('{width}x', closestWidth + (window.devicePixelRatio > 1 || window.innerWidth <= 1024 ? 'x@2x' : 'x'));

        if (!oldSrc || oldSrc !== newSrc) {
          const tempImage = new Image();
          tempImage.addEventListener('load', () => imageLoadHandler(newSrc));
          tempImage.src = newSrc;
        }
      }
    }

    loadLazyImages(recheckImages) {
      let selectorSuffix = recheckImages ? '' : ':not([data-lazy-loaded="true"])';

      // If image lazy loading is supported
      if ('loading' in HTMLImageElement.prototype) {
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix}`).forEach(this.loadLazyImage);
        if(this.intersectionObserver) {
          document.querySelectorAll(`[data-lazy-bg]${selectorSuffix}`).forEach(imgBg => {
            this.intersectionObserver.observe(imgBg);
          });
        }
      } else if (this.intersectionObserver) {
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix},[data-lazy-bg]${selectorSuffix}`).forEach(img => {
          this.intersectionObserver.observe(img);
        });
      } else {
        // Lazy loading and intersection observer not supported, fallback!!
        document.querySelectorAll(`[data-lazy-src]${selectorSuffix},[data-lazy-bg]${selectorSuffix}`).forEach(this.loadLazyImage);
      }
    }

    bindObservers() {
      // Observe scrolling where needed
      if ('IntersectionObserver' in window) {
        this.intersectionObserver = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                observer.unobserve(img);
                this.loadLazyImage(img);
              }
            });
          }, {
            // Start lazy loading when within 200px of the image
            rootMargin: '0px 0px 400px 0px',
            threshold: 0.01
          }
        );
      }

      // Observe window resize events
      window.addEventListener('resize', ImageLazyLoaderInstance.debounce(() => this.loadLazyImages(true)));

      window.addEventListener("load", () => {
        // Observe DOM changes
        const observer = new MutationObserver(ImageLazyLoaderInstance.debounce(() => {
          this.loadLazyImages();

          // Broadcast an event for future usage
          document.documentElement.dispatchEvent(
            new CustomEvent('theme:body-dom-change', {bubbles: true, cancelable: false})
          );
        }, 10));

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      });
    }
  }

  window.theme = window.theme || {};
  theme.imageLazyLoader = new ImageLazyLoaderInstance();

  /* Check for full width sections */
  theme.assessFullWidthSections = function() {
    document.querySelectorAll('.has-alt-bg').forEach(elem => elem.classList.remove('last-alt-bg'));
    document.querySelectorAll('.has-full-width-section').forEach(elem => elem.classList.remove('last-full-width-section'));
    document.querySelectorAll('#content .shopify-section > .use-alt-bg').forEach(elem => elem.parentElement.classList.add('has-alt-bg'));
    document.querySelectorAll('#content .shopify-section > .full-width-section').forEach(elem => {
      const section = elem.parentElement;
      section.classList.add('has-full-width-section');
      if (section.parentElement.lastElementChild === section) {
        section.classList.add('last-full-width-section');
      }
    });
  };
  theme.assessFullWidthSections();
</script>

<script src="{{ 'vendor.min.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'theme.js' | asset_url }}" defer="defer"></script>

{% render 'body-end-tag' %}
{% if content_for_header contains 'bss-b2b-cp' %}{% include 'bss-b2b-jquery-341-js' %}{% include 'bss-b2b-js' %}{% endif %}
{% render 'ac-tiered-main-global' %}
<script>
 
document.addEventListener('DOMContentLoaded', function() {
      // Function to update the dropdown based on tags
    function updateDropdownByTag(dropdown, tags) {
      let options = [];
      let max_value = 10;
      let multiplier = 1;
  
      if (tags.includes('Pack of 100')) {
        max_value = 200;
        multiplier = 100;
      } else if (tags.includes('Pack of 12')) {
        max_value = 80;
        multiplier = 12;
      } else if (tags.includes('Pack of 10')) {
        max_value = 100;
        multiplier = 10;
      } else if (tags.includes('Pack of 50')) {
        max_value = 200;
        multiplier = 50;
      } else if (tags.includes('Pack of 6')) {
        max_value = 168;
        multiplier = 6;
      } else if (tags.includes('Pack of 5')) {
        max_value = 200;
        multiplier = 5;
      }
  
      for (let i = 1; i <= max_value; i++) {
        options.push(`<option value="${i}">${i * multiplier}</option>`);
      }
      dropdown.innerHTML = options.join('');
    }
  
  function dropdownFunction(){
    // Find all quantity dropdowns and update them based on their data-tags attribute
    let quantityDropdowns = document.querySelectorAll('.qty-adjuster');
    
    quantityDropdowns.forEach(function(dropdown) {
      let tagsAttribute = dropdown.getAttribute('data-tags');
      if (tagsAttribute) {
        // Only proceed if tagsAttribute is not null
        let tags = tagsAttribute.split(',');
        updateDropdownByTag(dropdown, tags);
      } else {
        // Handle the case where there are no tags, or consider logging this situation
        console.log('No tags found for', dropdown);
      }
    });
  }
  dropdownFunction()
});

</script>
<script>
  let lowPrice = document.querySelectorAll('.lowP');
  let highPrice = document.querySelectorAll('.highP');
  for(let i of lowPrice){
    let val = Number(i.innerText)
    i.innerHTML = `${val.toFixed(2)}`;
  }
   for(let i of highPrice){
    let val = Number(i.innerText)
    i.innerHTML = `${val.toFixed(2)}`;
  }
</script>
  <script>
setTimeout(()=>{
 let pack_price_arr = document.querySelectorAll(".pack_price span");
if (pack_price_arr) {
    for (let i of pack_price_arr) {
        let dig = i.innerHTML;
        let mod = Number(dig).toFixed(2);
        i.innerHTML = mod;
    }
}
let price_each_arr = document.querySelectorAll(".single");
if (price_each_arr) {
    for (let element of price_each_arr) {
        let c = element.classList;

        switch (c[1]) {
        case 'price_each_default':
          let innerChild1 = element.firstElementChild;
          let dig1 = innerChild1.innerHTML;
          let mod1 = Number(dig1).toFixed(4);
          innerChild1.innerHTML = mod1;
          break;
        case 'price_each_1':
          let innerChild2 = element.firstElementChild;
          let dig2 = innerChild2.innerHTML;
          let mod2 = Number(dig2).toFixed(1);
          innerChild2.innerHTML = mod2;
          break;
        case 'price_each_2':
          let innerChild3 = element.firstElementChild;
          let dig3 = innerChild3.innerHTML;
          let mod3 = Number(dig3).toFixed(2);
          innerChild3.innerHTML = mod3;
          break;
        case 'price_each_3':
          let innerChild4 = element.firstElementChild;
          let dig4 = innerChild4.innerHTML;
          let mod4 = Number(dig4).toFixed(3);
          innerChild4.innerHTML = mod4;
          break;
        case 'price_each_4':
          let innerChild5 = element.firstElementChild;
          let dig5 = innerChild5.innerHTML;
          let mod5 = Number(dig5).toFixed(4);
          innerChild5.innerHTML = mod5;
          break;
        case 'price_each_5':
          let innerChild6 = element.firstElementChild;
          let dig6 = innerChild6.innerHTML;
          let mod6 = Number(dig6).toFixed(5);
          innerChild6.innerHTML = mod6;
          break;
        default:
         
      }
    }
}
},100)
</script>
<script>
  setTimeout(()=>{
      let clickyboxesWrapper = document.querySelector('#clickyboxes-option-colour');
      let clickyboxes = document.querySelector('#clickyboxes-option-colour a.active');
      if(clickyboxes){
        clickyboxes.classList.remove('active');
      }
      let variantSelector = '.selector-wrapper .pretty-select select';
      let cartBtn = document.querySelector('.btn.product-add.mini-form');
      let DropWrapper = document.querySelector(variantSelector);
      let clickyboxs = document.querySelector('#clickyboxes-option-colour a.active');

      if(clickyboxesWrapper !== null || DropWrapper !== null){
        if(clickyboxs == null){
          cartBtn.disabled = true;
          let cartBtnChild = document.querySelector('.btn.product-add.mini-form .button-text').innerText = "Add to Cart";
        }  
      }
   
      $(variantSelector + ' option:selected').removeAttr('selected');
      $(variantSelector).prepend($('<option>', {
          value: 'default',
          text: 'Select Option',
          selected: true ,
          disabled:true
      }));
      $(variantSelector + ' + span > span').text("Select Option");
       
      $(variantSelector).on('change', function() {
        let colour = document.querySelector('#clickyboxes-option-colour');
        let result = true; 
        $(variantSelector).each(function() {
           var currentSelect = $(this);
            currentSelect.find('option:selected').each(function() {
              var currentOption = $(this);
              if(colour !== null){
                let checkActive = document.querySelector('#clickyboxes-option-colour a.active');
                if(currentOption.val() == 'default' || checkActive == null ){
                  result = false;
                  return false;
                }
              }else{
                if(currentOption.val() == 'default' ){
                  result = false;
                  return false;
                }
              }
            });
        });
    
        if (result) {
          let cartBtn2 = document.querySelector('.btn.product-add.mini-form');
          cartBtn.style.opacity = '1';
        } else {
          let cartBtn = document.querySelector('.btn.product-add.mini-form');
          cartBtn.style.opacity = '0.4';
          setTimeout(()=>{
             let cartBtnChild = document.querySelector('.btn.product-add.mini-form .button-text').innerText = "Add to Cart";
             cartBtn.disabled = true;  
          },200) 
        }  
      });
        
      let col = document.querySelectorAll('#clickyboxes-option-colour li a');
      for(let i of col){
        i.addEventListener('click',function(){
            let colour = document.querySelector('#clickyboxes-option-colour a.active');
            let result = false; 
            let ele = $(variantSelector);
            if(ele.length === 0){
              result = true;
            }
            $(variantSelector).each(function() {
               var currentSelect = $(this);
                currentSelect.find('option:selected').each(function() {
                  var currentOption = $(this);
                  if(currentOption.val() !== 'default'){
                    result = true;
                  }
                });
            });
          
            if (result) {
              let cartBtn2 = document.querySelector('.btn.product-add.mini-form');
              cartBtn.style.opacity = '1';
            } else {
              let cartBtn = document.querySelector('.btn.product-add.mini-form');
              cartBtn.style.opacity = '0.4';
              setTimeout(()=>{
                 let cartBtnChild = document.querySelector('.btn.product-add.mini-form .button-text').innerText = "Add to Cart";
                 cartBtn.disabled = true;
              },200)
            }
        }) 
      }
  },1000)   
</script>
  
  
<script>
function runs(){
  let searchInput1 = document.querySelector('.main-search__input');
  let searchInput2 = document.querySelectorAll('.main-search__input')[1];
  let searchInput = (window.innerWidth > 767) ? searchInput1: searchInput2;  
  if(searchInput){
    searchInput.addEventListener('input',()=>{
      let len = searchInput.value;
      if(len.length >= 2){
        setTimeout(()=>{
          let searchPopup = document.querySelector('.clerk-instant-search-visible');
          let height = searchInput.getBoundingClientRect().top + searchInput.offsetHeight + 1;
          searchPopup.style.top = `${height}px`;
        },1000)
      }
    })
  }
}
runs();
window.addEventListener('scroll', function() {   
  runs();
  let searchPopup = document.querySelector('.clerk-instant-search-visible');  
  if(searchPopup != null){
    if(window.scrollY >= 10){
        searchPopup.style.top= (window.innerWidth > 767) ? "82px": "116px" ;
    }else{
        searchPopup.style.top= (window.innerWidth > 767) ? "157px": "168px" ;
    }
  } 
});
</script>

<span class="clerk"
  data-template="@live-search"
  data-instant-search=".main-search__input"
  data-instant-search-suggestions="6"
  data-instant-search-categories="6"
  data-instant-search-pages="6"
  data-instant-search-positioning="left"
></span>
</body>
</html>